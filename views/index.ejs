<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script type="text/javascript" src="https://unpkg.com/popper.js"></script>
  <!-- <script type="text/javascript" src="https://unpkg.com/tooltip.js"></script> -->
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
  <script src="__dirname/../socket.io/socket.io.js"></script>

  <link rel="icon" href="runnerIcon.ico" type="image/x-icon">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="main.css">
  <link href="control.css" rel="stylesheet" type="text/css">
  <title>Runner by Artem</title>
</head>
  <script type="text/javascript">
      const userName = "<%= name %>"
      const userColor = "<%= color %>"
  </script>
<body>

  <div class="container">
    <div class="row">

      <div class="gameField col-md-8">

        <h1 class="helloDiv" >Hi<b> <%= name %></b><a class="logout" href="/logout"> LogOut</a></h1>
        <div class="containers">
          <div class="textMenu">
            <b id="counter">0</b>
            <span id="oldCounter">HI:<b>0</b></span>
          </div>
          <button id="startBtn" class="gameBtn show" type="button">START</button>
          <button onclick="restartGame()" id="restartBtn" class="gameBtn" type="button">RESTART</button>
          <div class="runner-container">
            <canvas id="cnv"></canvas>
          </div>
        </div>
        <div id="rating"></div>

      </div>


      <div class="col-md-4">
        <nav class="messeges"></nav>

        <form id="messageForm">
          <input autocomplete="off" focus placeholder="Your messege" type="te" class="inputMsg form-control" >
          <button type="submit" class="btn btn-danger" value="Send">Send</button>
        </form>


        <a tabindex="0" class="online" role="button" data-container="body" data-trigger="focus" data-toggle="popover" data-placement="top" data-content="">
          <span>Online:</span><b></b>
        </a>

      </div>

    </div>
  </div>




  <script>


  $(function () {

    function scrollButtom() {
      $(".messeges").stop().animate({ scrollTop: $(".messeges")[0].scrollHeight}, 1000);
    }

      $('.online').popover({
        container: 'body',
        trigger: 'focus'
      })



    const socket = io.connect()
    let oldCounter= 0
    socket.emit('updatedPointsRes', {name:userName})
    socket.emit('startSettings', {name:userName})

    $('#messageForm').submit(e => {
      e.preventDefault()
      let msgInput = $('.inputMsg').val()
      if(msgInput != ''){
        socket.emit('newMessege', {name:userName, msg:$('.inputMsg').val(), color:userColor})
        $('.inputMsg').val('')
      }
    })

    socket.on('setPointsRes', data =>{
      let bodyPoints = []
      data.forEach(function (entery, index) {
        if(userName == entery.name){
          oldCounter = entery.points
          $('#oldCounter b').html(oldCounter)
        }

        bodyPoints.push("<p>"+(index+1) +") <b>"+entery.name+"</b>: "+entery.points+"</p>");
      })

      $('#rating').html(()=>{
        let it = ''
        bodyPoints.forEach(function (i) {
          it+=i
        });
        console.log('UPDATED_POINTS')
        return it
      })
    })

    socket.on('PFM', data =>{
        data.forEach(function (entery) {
          $('.messeges').append("<p style='background-color:"+entery.color+"' class='alert'><b>"+entery.name+"</b>: "+entery.msg+"</p>");
        })
      scrollButtom()
    })
    socket.on('Addmessage', data =>{
      // console.log('message: ' + msg);
      $('.messeges').append("<div style='background-color:"+data.color+"' class='alert'><b>"+data.name+"</b>: "+data.msg+"</div>")
      scrollButtom()
    })

    socket.on('connectDisconnectOnline', data => {

        let online = data.online

        $('.online b').html(data.online.length)


          $('.online').attr('data-content', ()=>{
              let dataContent =''
              for (let i = 0; i < online.length; i++) {
                if(i == online.length -1){
                  dataContent += (online[i])
                }else dataContent += (online[i] + ', ')
              }
              return dataContent
            })


        console.log(data.online)

      $('.messeges').append("<div class='alert text-center connectDisconnect'><b>"+data.name+"</b> "+ data.value+"</div>")
      scrollButtom()
    })


    let restartBtn = $('#restartBtn')
    let startBtn = $('#startBtn')
    let counterB = $('#counter')
    let canvas = $('#cnv')[0]
    let context = canvas.getContext('2d')

    let device
    let windowWidth
    let speed = 3;



    let spritePlayer = new Image()
    spritePlayer.src = 'player2d.png';
    let xxxx = 0, tickCount =0
    player = {
      img: spritePlayer,
      x: 50,
      y: canvas.height-20-80,
      width:80,
      height:80,
      ySpeed:0,
      jumping:false,
      gravity:0.75
    }

    //
    //
    // let player = {
    //   x: 50,
    //   y: canvas.height+50,
    //   width:32,
    //   height:32,
    //   ySpeed:0,
    //   jumping:false,
    //   gravity:0.75
    // }


    if(window.screen.width < 600){
      windowWidth = window.screen.width
      device = 'phone'
      player.gravity = 0.55
      if (windowWidth >=350 && windowWidth < 600) speed = 2
    }else{
      device = 'pc'
      windowWidth = 600
    }
    const windowHeight = window.screen.height

    let dist = 150
    let xpos1 = 0
    let xpos2 = 0
    let xpos3 = 0
    let ypos = 0
    let endGame = false
    let cubes =[]
    let counter= 0
    // if(!oldCounter){
    //   // oldCounter=localStorage.getItem('count')
    // }else

    // localStorage.setItem('count', 0)


    restartGame = (e)=>{
      counter = 0
      restartBtn.removeClass('show')
      endGame =false
      xpos1 = cube1.x + dist
      xpos2 = xpos1 + cube2.x + dist
      xpos3 = xpos2 + cube3.x + dist
      ypos1 = cube1.y
      ypos2 = cube2.y
      ypos3 = cube3.y
      console.log('restart');
    }
    function rnd(min,max){return Math.floor(Math.random() * (max- 0) + min)}

    canvas.width = windowWidth
    canvas.height = 250
    canvas.style.background = '#ff8'

    let spriteStone = new Image()
    spriteStone.src = 'stone.png';

    let cube1 = {
      img: spriteStone,
      width:30,
      height:30,
      x: canvas.width,
      y: canvas.height-20-27
    }

    let cube2 = {
      img: spriteStone,
      width:40,
      height:30,
      x: canvas.width,
      y: canvas.height-20-27

    }

    let cube3 = {
      img: spriteStone,
      width:30,
      height:35,
      x: canvas.width,
      y: canvas.height-20-33
    }



    controller = {
      up:false,
      listener: (e)=>{
        if( (e.type == 'keydown' && (e.keyCode == 38 || e.keyCode == 32) ) || e.type == 'touchstart' ){
          controller.up = true
          // console.log('SpeedGame='+speed+(0.5*counter/1000));
        }else controller.up = false
      }
    }


    draw = ()=>{

      if(
          ( ( (xpos1+new_cube1.width) >=50 && xpos1 <=105 ) && player.y >= (ypos1-new_cube1.height) ||
            ( (xpos2+new_cube2.width) >=50 && xpos2 <=105 ) && player.y >= (ypos2-new_cube2.height) ||
            ( (xpos3+new_cube3.width) >=50 && xpos3 <=105 ) && player.y >= (ypos3-new_cube3.height)
          ) && !endGame
        ){

        context.clearRect(0,0, windowWidth, windowHeight)
        endGame = true
        restartBtn.addClass('show')
        if(Math.round(counter/10) > oldCounter){
          oldCounter = Math.round(counter/10)
          $('#oldCounter b').html(oldCounter)
          socket.emit('newPointsRes', {name:userName,points:Math.round(counter/10)})
          // socket.emit('updatedPointsRes', {name:userName})
          socket.emit('newMessegePoints', {name:userName, msg:'NEW RECORD:' + Math.round(counter/10) })
        }else{
          socket.emit('newMessegePoints', {name:userName, msg:'my result:' + Math.round(counter/10) })
        }



      }else if (!endGame){
        context.clearRect(0,0, windowWidth, windowHeight)


        if(tickCount > 5){
          tickCount = 0
          xxxx = (xxxx >= 603 ? 0 : (xxxx+268) )
        }

        context.drawImage(player.img, xxxx, 0, 220, 280, player.x, player.y-45, player.width, player.height)
        tickCount++


        // context.fillRect(player.x, player.y, player.width, player.height) //CREATE PLAYER

        context.beginPath();
        context.moveTo(0, context.canvas.height-20);
        context.lineTo(context.canvas.width, context.canvas.height-20);
        context.stroke();

        switch (rndCubes1) {
          case 1:
            new_cube1 = {
              width: cube1.width,
              height: cube1.height,
              y: cube1.y
            }
            // context.fillRect(xpos1, new_cube1.y, new_cube1.width, new_cube1.height) //CREATE CUBES1
            context.drawImage(cube1.img, 0, 0, 50, 50, xpos1, new_cube1.y, new_cube1.width, new_cube1.height)
            break;
          case 2:
           new_cube1 = {
              width: cube2.width,
              height: cube2.height,
              y: cube2.y
            }
            // context.fillRect(xpos1, new_cube1.y, new_cube1.width, new_cube1.height) //CREATE CUBES1
            context.drawImage(cube1.img, 0, 0, 50, 50, xpos1, new_cube1.y, new_cube1.width, new_cube1.height)
            break;
          case 3:
            new_cube1 = {
              width: cube3.width,
              height: cube3.height,
              y: cube3.y
            }
            // context.fillRect(xpos1, new_cube1.y, new_cube1.width, new_cube1.height) //CREATE CUBES1
            context.drawImage(cube1.img, 0, 0, 50, 50, xpos1, new_cube1.y, new_cube1.width, new_cube1.height)
            break;
        }

        switch (rndCubes2) {
          case 1:
            new_cube2 = {
              width: cube1.width,
              height: cube1.height,
              y: cube1.y
            }
            // context.fillRect(xpos2 , new_cube2.y, new_cube2.width, new_cube2.height) //CREATE CUBES2
            context.drawImage(cube1.img, 0, 0, 50, 50, xpos2, new_cube2.y, new_cube2.width, new_cube2.height)
            break;
          case 2:
             new_cube2 = {
              width: cube2.width,
              height: cube2.height,
              y: cube2.y
            }
            // context.fillRect(xpos2 , new_cube2.y, new_cube2.width, new_cube2.height) //CREATE CUBES2
            context.drawImage(cube1.img, 0, 0, 50, 50, xpos2, new_cube2.y, new_cube2.width, new_cube2.height)
            break;
          case 3:
             new_cube2 = {
              width: cube3.width,
              height: cube3.height,
              y: cube3.y
            }
            // context.fillRect(xpos2 , new_cube2.y, new_cube2.width, new_cube2.height) //CREATE CUBES2
            context.drawImage(cube1.img, 0, 0, 50, 50, xpos2, new_cube2.y, new_cube2.width, new_cube2.height)
            break;
        }

        switch (rndCubes3) {
          case 1:
            new_cube3 = {
              width: cube1.width,
              height: cube1.height,
              y: cube1.y
            }

            // context.fillRect(xpos3 , new_cube3.y, new_cube3.width, new_cube3.height) //CREATE CUBES3
            context.drawImage(cube1.img, 0, 0, 50, 50, xpos3, new_cube3.y, new_cube3.width, new_cube3.height)
            break;
          case 2:
            new_cube3 = {
              width: cube2.width,
              height: cube2.height,
              y: cube2.y
            }
            // context.fillRect(xpos3 , new_cube3.y, new_cube3.width, new_cube3.height) //CREATE CUBES3
            context.drawImage(cube1.img, 0, 0, 50, 50, xpos3, new_cube3.y, new_cube3.width, new_cube3.height)
            break;
          case 3:
            new_cube3 = {
              width: cube3.width,
              height: cube3.height,
              y: cube3.y
            }
            // context.fillRect(xpos3 , new_cube3.y, new_cube3.width, new_cube3.height) //CREATE CUBES3
            context.drawImage(cube1.img, 0, 0, 50, 50, xpos3, new_cube3.y, new_cube3.width, new_cube3.height)
            break;
        }




        counter++
        $('#counter').html(Math.round(counter/10))
        // console.log('counter=' + Math.round(counter/10));


      }else{

        // console.log('end');
      }
    }


    $('#startBtn').on('click', (e)=>{
      startBtn.removeClass('show')
      updateCube()
    })

    let updateCube = () =>{
      requestAnimationFrame(updateCube)
      if (controller.up && player.jumping == false) {
        player.ySpeed -= 23;
        player.jumping = true;
      }

      player.ySpeed += player.gravity;// gravity
      player.y += player.ySpeed;
      player.ySpeed *= 0.9;// friction

      if (player.y > context.canvas.height- 20 - 32) {
        player.jumping = false;
        player.y = context.canvas.height -20 - 32;
        player.ySpeed = 0;
      }


      if(xpos1 < -cube1.width && !endGame){
        rndPixels1 = rnd(-350,350);
        rndCubes1 = rnd(1,3);
        xpos1 = xpos3+cube1.x + dist + rndPixels1
        console.log('rndCubes1=' + rndCubes1);


      }else if(xpos2 < -cube2.width && !endGame){
        rndPixels2 = rnd(-350,350);
        rndCubes2 = rnd(1,3);
        xpos2 = xpos1+ cube2.x + dist + rndPixels2
        console.log('rndCubes2=' + rndCubes2);

      }else if(xpos3 < -cube3.width && !endGame){
        rndPixels3 = rnd(-350,350);
        rndCubes3 = rnd(1,3);
        xpos3 = xpos2+ cube3.x +dist + rndPixels3
        console.log('rndCubes3=' + rndCubes3);

      }else{
        xpos1 -= (speed+(0.5*counter/1000))
        xpos2 -= (speed+(0.5*counter/1000))
        xpos3 -= (speed+(0.5*counter/1000))
      }
      draw()
    }



    // var rndPixels1 = rnd(100,250);
    // var rndPixels2 = rnd(300,450);
    // var rndPixels3 = rnd(500,600);
    let rndCubes1 = rnd(1,3);
    let rndCubes2 = rnd(1,3);
    let rndCubes3 = rnd(1,3);

    let rndPixels1 = rnd(-200,450);
    let rndPixels2 = rnd(-450,450);
    let rndPixels3 = rnd(-450,450);

    console.log('rndCubes1=' + rndCubes1);
    console.log('rndCubes2=' + rndCubes2);
    console.log('rndCubes3=' + rndCubes3);

    xpos1 = cube1.x + dist + rndPixels1
    xpos2 = xpos1 + cube2.x + dist + rndPixels2
    xpos3 = xpos2 + cube3.x + dist + rndPixels3
    // console.log('xpos1=' + xpos1);  //750
    // console.log('xpos2=' + xpos2);  //1500
    // console.log('xpos3=' + xpos3);  //2250

    ypos1 = cube1.y
    ypos2 = cube1.y
    ypos3 = cube1.y

    var new_cube1 = {
      width: 0,
      height: 0,
      y: 0
    }
    var new_cube2 = {
      width: 0,
      height: 0,
      y: 0
    }
    var new_cube3 = {
      width: 0,
      height: 0,
      y: 0
    }
    // let new_cube2
    // let new_cube3




    $('.gameField').on("touchstart", controller.listener)

    $('.gameField').on("touchend", controller.listener)
    window.addEventListener("keydown", controller.listener)
    window.addEventListener("keyup", controller.listener)





  })



  </script>
  <!-- <script src="game.js" type="text/javascript"></script> -->
</body>
</html>
